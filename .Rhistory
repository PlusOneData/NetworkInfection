library(igraph)
initG <- function(g, n){
V(g)$infected <- c(rep(T, n), rep(F, vcount(g)-n))
V(g)$color <- ifelse(V(g)$infected, 'red', 'blue')
g
}
n <- 1000
ed <- n * 4
prob.infect <- .3
rn <- sample_gnm(n, ed, directed = F) %>%
initG(1)
set.seed(4321); rn <- sample_gnm(n, ed, directed = F) %>%
initG(1)
set.seed(4321); sfree <- sample_fitness_pl(n, ed, 2.2) %>%
initG(1)
set.seed(4321); sw <-  sample_smallworld(1, n, 4, .1) %>%
initG(1)
set.seed(4321); plot(sw, vertex.label = '', vertex.size = 3)
nextTurn <- function(g, prob.infect){
infect_adja <- g %>%
ego(nodes = V(.)[infected], mindist = 1) %>%
unlist() %>%
unique() %>%
{V(g)[.][!infected]} %>%
{
l <- length(.)
bool <- runif(l) <= prob.infect
.[bool]
}
V(g)[infect_adja]$infected <- T
V(g)[infect_adja]$color <- "red"
g
}
createTimeline <- function(g, t, prob.infect){
timedNetworks <- list(g)
for( x in 2:t){
timedNetworks[[x]] <- nextTurn(timedNetworks[[x-1]], prob.infect)
}
timedNetworks
}
test1 <- createTimeline(sfree, 10, .3)
test0 <- createTimeline(rn, 10, .3)
test2 <- createTimeline(sw, 10, .3)
set.seed(4321); plot(test1[[2]], vertex.label = '', vertex.size = 5)
set.seed(4321); plot(test0[[10]], vertex.label = '', vertex.size = 5)
set.seed(4321); plot(test1[[10]], vertex.label = '', vertex.size = 5)
test1[[1]]
lrg_comp_1 <- test1[[1]] %>%
components()
lrg_comp_1
lrg_comp_1 <- test1[[1]] %>%
components() %>%
.$csize
lrg_comp_1 <- test1[[1]] %>%
components() %>%
.$csize %>%
which.max()
lrg_comp_1
?which.max
?which
lrg_comp_1 <- test1[[1]] %>%
components() %>%
{
comp_id <- which.max(.$csize);
which(x$membership == comp_id)
}
lrg_comp_1 <- test1[[1]] %>%
components() %>%
{
comp_id <- which.max(.$csize);
which(.$membership == comp_id)
}
lrg_comp_1
lrg_comp_1 %>% length
lrg_comp_1 <- test1[[1]] %>%
components() %>%
{
comp_id <- which.max(.$csize);
comp_v <- which(.$membership == comp_id)
comp_v
}
llrg_comp_1
lrg_comp_1
test1[[1]] %>%
{. - V(.)[!V(.) %in% lrg_comp_1]}
test1[[1]] %>%
{. - V(.)[!V(.) %in% lrg_comp_1]} %>%
plot(vertex.label = '', vertex.size = 5)
test1[[1]] %>%
{. - V(.)[!V(.) %in% lrg_comp_1]} %>%
plot(vertex.label = '', vertex.size = 3)
length(test1)
for(x in 1:length(test1)){
test1[[x]] <- test1[[1]] %>%
{. - V(.)[!V(.) %in% lrg_comp_1]}
}
test1 <- createTimeline(sfree, 10, .3)
# Scale free has multiple components; reduce to just he largest
set.seed(4321)
test1 <- createTimeline(sfree, 10, .3)
test0 <- createTimeline(rn, 10, .3)
test2 <- createTimeline(sw, 10, .3)
set.seed(4321); plot(test1[[10]], vertex.label = '', vertex.size = 5)
lrg_comp_1 <- test1[[1]] %>%
components() %>%
{
comp_id <- which.max(.$csize);
comp_v <- which(.$membership == comp_id)
comp_v
}
for(x in 1:length(test1)){
test1[[x]] <- test1[[1]] %>%
{. - V(.)[!V(.) %in% lrg_comp_1]}
}
set.seed(4321); plot(test1[[10]], vertex.label = '', vertex.size = 3)
set.seed(4321); plot(test0[[10]], vertex.label = '', vertex.size = 3)
set.seed(4321); plot(test2[[10]], vertex.label = '', vertex.size = 3)
set.seed(4321); plot(test1[[10]], vertex.label = '', vertex.size = 3)
set.seed(4321)
test1 <- createTimeline(sfree, 10, .3)
test0 <- createTimeline(rn, 10, .3)
test2 <- createTimeline(sw, 10, .3)
# Scale free has multiple components; reduce to just he largest
set.seed(4321); plot(test1[[10]], vertex.label = '', vertex.size = 5)
lrg_comp_1 <- test1[[1]] %>%
components() %>%
{
comp_id <- which.max(.$csize);
comp_v <- which(.$membership == comp_id)
comp_v
}
for(x in 1:length(test1)){
test1[[x]] <- test1[[x]] %>%
{. - V(.)[!V(.) %in% lrg_comp_1]}
}
set.seed(4321); plot(test1[[10]], vertex.label = '', vertex.size = 3)
set.seed(4321)
test1 <- createTimeline(sfree, 15, .3)
test0 <- createTimeline(rn, 15, .3)
test2 <- createTimeline(sw, 15, .3)
# Scale free has multiple components; reduce to just he largest
set.seed(4321); plot(test1[[10]], vertex.label = '', vertex.size = 5)
lrg_comp_1 <- test1[[1]] %>%
components() %>%
{
comp_id <- which.max(.$csize);
comp_v <- which(.$membership == comp_id)
comp_v
}
for(x in 1:length(test1)){
test1[[x]] <- test1[[x]] %>%
{. - V(.)[!V(.) %in% lrg_comp_1]}
}
set.seed(4321); plot(test1[[15]], vertex.label = '', vertex.size = 3)
set.seed(4321); plot(test0[[15]], vertex.label = '', vertex.size = 3)
set.seed(4321); plot(test2[[15]], vertex.label = '', vertex.size = 3)
install.packages(animation)
install.packages("animation")
set.seed(4321); plot(test1[[15]], vertex.label = '', vertex.size = 4)
set.seed(4321); plot(test1[[15]], vertex.label = '', vertex.size = 3)
animate_system <- function(g_list, main, filepath){
lapply(g_list, function(x){
set.seed(4321); plot(x, main = main, vertex.label = '', vertex.size = 3)
})
}
animate_system(test1, paste0("Scale Free Network of size ~", n), '../Images/20200527_ScaleFree_100.gif')
set.seed(4321); plot(test1[[15]], vertex.label = '', vertex.size = 3, sub = 'hi')
animate_system <- function(g_list, main, filepath){
lapply(1:length(g_list), function(i){
set.seed(4321); plot(g_list[[i]], main = main, sub = paste('Turn:', i - 1), vertex.label = '', vertex.size = 3)
})
}
?animation::saveGIF
animate_system <- function(g_list, main, filepath){
animation::saveGIF({
lapply(1:length(g_list), function(i){
set.seed(4321); plot(g_list[[i]], main = main, sub = paste('Turn:', i - 1), vertex.label = '', vertex.size = 3)
})
},
movie.name = filepath,
ani.width = 600,
ani.height = 600,
interval = 1
)
}
animate_system(test1, paste0("Scale Free Network of size ~", n), '../Images/20200527_ScaleFree_100.gif')
getwd()
dev.off()
animate_system <- function(g_list, main, filepath){
animation::saveGIF({
lapply(1:length(g_list), function(i){
set.seed(4321); plot(g_list[[i]],
main = main,
sub = paste('Turn:', i - 1),
vertex.label = '',
vertex.size = 3)
})
},
movie.name = filepath,
ani.width = 600,
ani.height = 600,
interval = 1
)
}
animate_system(test1, paste0("Scale Free Network of size ~", n), '../Images/20200527_ScaleFree_1000.gif')
animate_system(test1,
paste0("Scale Free Network of size ~", n),
'20200527_ScaleFree_1000.gif')
dir.create('../Images')
animate_system(test1,
paste0("Scale Free Network of size ~", n),
'../Images/20200527_ScaleFree_1000.gif')
setwd('..')
animate_system(test1,
paste0("Scale Free Network of size ~", n),
'Images/20200527_ScaleFree_1000.gif')
library(igraph)
library(infection.graph)
?random.graph.game
n <- 1000
ed <- n * 4
prob.infect <- .1
gmma <- 14
di <- default_infect(1, prob.infect)
dr <- default_recover(20)
di <- default_infect(init_num = 1, rate = prob.infect)
?default_recover
dr <- default_recover(max_recovery_time = 20)
?infection_model
model <- infection_model(components = list(di,dr))
# Erdos-Renyi network: constant probability to connect nodes
set.seed(4321); rn <- sample_gnm(n, ed, directed = F) %>%
model$init_model()
# Scale free network
set.seed(4321); sfree <- sample_fitness_pl(n, ed, 2.2) %>%
model$init_model()
# Small world network
set.seed(4321); sw <-  sample_smallworld(1, n, 4, .1) %>%
model$init_model()
set.seed(4321); plot(sw, vertex.label = '', vertex.size = 3)
set.seed(4321)
test0 <- createTimeline(rn, 30, model)
test1 <- createTimeline(sfree, 30, model)
test2 <- createTimeline(sw, 60, model)
# Plot snapshot of final state
set.seed(4321); plot(test0[[30]], vertex.label = '', vertex.size = 3)
set.seed(4321); plot(test1[[30]], vertex.label = '', vertex.size = 3)
set.seed(4321); plot(test2[[60]], vertex.label = '', vertex.size = 3)
#Windows permission issue, cannot save to other folder for some reason
#need to save in current directory and manually move to images
# Generate gifs
animate_system(test1,
paste0("Scale Free Network of size ~", n),
'20200603_ScaleFree_1000.gif')
animate_system(test0,
paste0("Random Network of size ~", n),
'20200603_Random_1000.gif')
animate_system(test2,
paste0("Small World Network of size ~", n),
'20200603_SmallWorld_1000.gif')
# Save timeline as data files
readr::write_rds(test1, "../Data/20200603_ScaleFree_1000_1-15.rds")
readr::write_rds(test0, "../Data/20200603_Random_1000_1-15.rds")
readr::write_rds(test2, "../Data/20200603_SmallWorld_1000_1-15.rds")
# Generate stat blocks of each network
stats1 <- getStats(test1)
stats0 <- getStats(test0)
stats2 <- getStats(test2)
stats1$model <- 'scale free'
stats0$model <- 'random'
stats2$model <- 'small world'
# Plot stats
library(ggplot2)
ggplot(rbind(stats1, stats0, stats2)) +
geom_line(aes(time, value, color = type), size = 1.5) +
facet_wrap(~model) +
theme_bw() +
labs(title = "SIR Distribution") +
scale_color_brewer(type = 'qual')
ggsave('../Images/2000603_SIR_Distro.pdf')
ggplot(stats0) +
geom_line(aes(time, value, color = type))
?keepLargeComponent
devtools::document()
setwd("infection.graph")
devtools::document()
devtools::document()
devtools::document()
