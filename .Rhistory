library(dplyr)
library(tidyr)
install.packages("visNetwork")
dlContactGraph <- simplify(graph = dlContactGraph,remove.loops = T)
plot(dlContactGraph)
library(visNetwork)
data <- toVisNetworkData(dlContactGraph)
visNetwork(nodes = data$nodes, edges = data$edges)
library(networkD3)
##
igraph_to_networkD3(dlContactGraph)
##
d3data <- igraph_to_networkD3(dlContactGraph)
simpleNetwork(d3data)
##
d3data <- igraph_to_networkD3(dlContactGraph)
forceNetwork(d3data)
d3data
names(d3data)
forceNetwork(d3data, Links = "links", Nodes = "nodes")
head(d3data)
set.seed(4321); dl <- dlContactGraph %>%
covid_model$init_model()
library(igraph)
library(infection.graph)
library(animation)
library(readxl)
library(dplyr)
library(tidyr)
library(visNetwork)
library(networkD3)
n <- 1000
ed <- n * 4
prob.infect <- .1
gmma <- 14
covid_di <- default_infect(init_num = 3, rate = prob.infect)
covid_dr <- default_recover(max_recovery_time = 20)
covid_model <- infection_model(components = list(covid_di, covid_dr))
flu_di <- default_infect(init_num = 7, rate = 0.01)
flu_dr <- default_recover(max_recovery_time = 7)
flu_model <- infection_model(components = list(flu_di, flu_dr))
#################
## Initialize graph networks
#################
#read in DL Graph
dlContactMatrix <- readxl::read_xlsx("./Data/Discovery Lab Contact Network.xlsx")
groupCols <- names(dlContactMatrix)[-1]
dlContactMatrix <- dlContactMatrix %>%
mutate_at(vars(groupCols), as.integer)
dlContactMatrix[is.na(dlContactMatrix)]<- 6
## edge list
## origin not equal to destination
edgeList <- dlContactMatrix %>%
pivot_longer(cols = -Name) %>%
filter(value > 0) %>%
rename("Origin" = "Name") %>%
rename("Dest" = "name") %>%
select(-value)
#get graph from edgelist
dlContactGraph <- igraph::graph_from_edgelist(el = as.matrix(edgeList),directed = F)
dlContactGraph <- simplify(graph = dlContactGraph,remove.loops = T)
plot(dlContactGraph)
##
data <- toVisNetworkData(dlContactGraph)
visNetwork(nodes = data$nodes, edges = data$edges)
set.seed(4321); dl <- dlContactGraph %>%
covid_model$init_model()
library(igraph)
library(infection.graph)
library(animation)
library(readxl)
library(dplyr)
library(tidyr)
library(visNetwork)
library(networkD3)
n <- 1000
ed <- n * 4
prob.infect <- .1
gmma <- 14
covid_di <- default_infect(init_num = 3, rate = prob.infect)
covid_dr <- default_recover(max_recovery_time = 20)
covid_model <- infection_model(components = list(covid_di, covid_dr))
flu_di <- default_infect(init_num = 7, rate = 0.01)
flu_dr <- default_recover(max_recovery_time = 7)
flu_model <- infection_model(components = list(flu_di, flu_dr))
#################
## Initialize graph networks
#################
#read in DL Graph
dlContactMatrix <- readxl::read_xlsx("./Data/Discovery Lab Contact Network.xlsx")
groupCols <- names(dlContactMatrix)[-1]
dlContactMatrix <- dlContactMatrix %>%
mutate_at(vars(groupCols), as.integer)
dlContactMatrix[is.na(dlContactMatrix)]<- 6
## edge list
## origin not equal to destination
edgeList <- dlContactMatrix %>%
pivot_longer(cols = -Name) %>%
filter(value > 0) %>%
rename("Origin" = "Name") %>%
rename("Dest" = "name") %>%
select(-value)
#get graph from edgelist
dlContactGraph <- igraph::graph_from_edgelist(el = as.matrix(edgeList),directed = F)
dlContactGraph <- simplify(graph = dlContactGraph,remove.loops = T)
plot(dlContactGraph)
##
data <- toVisNetworkData(dlContactGraph)
visNetwork(nodes = data$nodes, edges = data$edges)
## dl contact network
set.seed(4321); dl <- dlContactGraph %>%
covid_model$init_model()
# Erdos-Renyi network: constant probability to connect nodes
set.seed(4321); rn <- sample_gnm(n, ed, directed = F) %>%
covid_model$init_model()
# Scale free network
set.seed(4321); sfree <- sample_fitness_pl(n, ed, 2.2) %>%
covid_model$init_model()
# Small world network
set.seed(4321); sw <-  sample_smallworld(1, n, 4, .1) %>%
covid_model$init_model()
set.seed(4321); plot(sw, vertex.label = '', vertex.size = 3)
#################
## Progress models through time steps
#################
set.seed(4321)
test0 <- createTimeline(rn, 30, covid_model)
test1 <- createTimeline(sfree, 30, covid_model)
test2 <- createTimeline(sw, 60, covid_model)
test3 <- createTimeline(dl, 60, covid_model)
#################
## Generate data files and plots
#################
# Plot snapshot of final state
set.seed(4321); plot(test0[[30]], vertex.label = '', vertex.size = 3)
set.seed(4321); plot(test1[[30]], vertex.label = '', vertex.size = 3)
set.seed(4321); plot(test2[[60]], vertex.label = '', vertex.size = 3)
set.seed(4321); plot(test3[[60]], vertex.label = '', vertex.size = 3)
#Windows permission issue, cannot save to other folder for some reason
#need to save in current directory and manually move to images
# Generate gifs
animate_system(test0,
paste0("Random Network of size ~", n),
'20200615_Random_1000.gif')
animate_system(test1,
paste0("Scale Free Network of size ~", n),
'20200615_ScaleFree_1000.gif')
animate_system(test2,
paste0("Small World Network of size ~", n),
'20200615_SmallWorld_1000.gif')
animate_system(test2,
paste0("DL Contact Network ~", n),
'20200916_DL_1000.gif')
# Save timeline as data files
readr::write_rds(test0, "./Data/20200615_Random_1000_1-15.rds")
readr::write_rds(test1, "./Data/20200615_ScaleFree_1000_1-15.rds")
readr::write_rds(test2, "./Data/20200615_SmallWorld_1000_1-15.rds")
readr::write_rds(test3, "./Data/20200615_DL_1000_1-15.rds")
# Generate stat blocks of each network
stats0 <- getStats(test0)
stats1 <- getStats(test1)
stats2 <- getStats(test2)
stats3 <- getStats(test3)
stats0$model <- 'random'
stats1$model <- 'scale free'
stats2$model <- 'small world'
stats3$model <- 'DL Contact Network'
# Plot stats
library(ggplot2)
ggplot(rbind(stats1, stats0, stats2, stats3)) +
geom_line(aes(time, value, color = type), size = 1.5) +
facet_wrap(~model) +
theme_bw() +
labs(title = "SIR Distribution") +
scale_color_brewer(type = 'qual')
ggsave('./Images/200916_SIR_Distro.pdf')
animate_system(test3,
paste0("DL Contact Network ~", n),
'20200916_DL_1000.gif')
visNetwork(nodes = data$nodes, edges = data$edges)
plot(dlContactGraph)
shiny::runApp()
edgeList
dlContactMatrix <- readxl::read_xlsx("./Data/Discovery Lab Contact Network.xlsx")
groupCols <- names(dlContactMatrix)[-1]
dlContactMatrix <- dlContactMatrix %>%
mutate_at(vars(groupCols), as.integer)
dlContactMatrix[is.na(dlContactMatrix)]<- 6
## edge list
## origin not equal to destination
edgeList <- dlContactMatrix %>%
pivot_longer(cols = -Name) %>%
filter(value > 0) %>%
rename("Origin" = "Name") %>%
rename("Dest" = "name") %>%
select(-value)
# Import required libraries
library(shiny)
library(igraph)
library(networkD3)
library(network)
#library(ndtv)
library(htmlwidgets)
library(shinyBS)
library(intergraph)
library(infection.graph)
#library(animation)
library(htmltools)
library(ggplot2)
library(shinycssloaders)
library(shinyWidgets)
#library(knitr)
library(scales)
library(dplyr)
library(readxl)
# Discovery Lab Contact Network
#read in DL Graph
dlContactMatrix <- readxl::read_xlsx("./Data/Discovery Lab Contact Network.xlsx")
groupCols <- names(dlContactMatrix)[-1]
dlContactMatrix <- dlContactMatrix %>%
mutate_at(vars(groupCols), as.integer)
dlContactMatrix[is.na(dlContactMatrix)]<- 6
## edge list
## origin not equal to destination
edgeList <- dlContactMatrix %>%
pivot_longer(cols = -Name) %>%
filter(value > 0) %>%
rename("Origin" = "Name") %>%
rename("Dest" = "name") %>%
select(-value)
edgeList <- dlContactMatrix %>%
pivot_longer(cols = -Name) %>%
filter(value > 0) %>%
rename("Origin" = "Name") %>%
rename("Dest" = "name") %>%
select(-value)
library(tidyr)
edgeList <- dlContactMatrix %>%
pivot_longer(cols = -Name) %>%
filter(value > 0) %>%
rename("Origin" = "Name") %>%
rename("Dest" = "name") %>%
select(-value)
edgeList
dlContactGraph
dlContactGraph
#get graph from edgelist
dlContactGraph <- igraph::graph_from_edgelist(el = as.matrix(edgeList),directed = F)
dlContactGraph <- simplify(graph = dlContactGraph,remove.loops = T)
dlContactGraph
vcount(dlContactGraph)
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
### simulation test ground
#devtools::install("./infection.graph")
library(igraph)
library(infection.graph)
library(animation)
library(readxl)
library(dplyr)
library(tidyr)
library(visNetwork)
library(networkD3)
library(ggplot2)
#source("./Code/densityInfectionModule.R")
source("./Code/testingModule.R")
source("./Code/leaveModule.R")
source("./Code/simulationModule.R")
source("./Code/PPE_Module.R")
source("./Code/ppeDensityInfectionModule.R")
## Eventually want to parallelize
#### ingest Graph Data
#read in DL Graph
dlContactMatrix <- readxl::read_xlsx("./Data/Discovery Lab Contact Network.xlsx")
groupCols <- names(dlContactMatrix)[-1]
dlContactMatrix <- dlContactMatrix %>%
mutate_at(vars(groupCols), as.integer)
dlContactMatrix[is.na(dlContactMatrix)]<- 6
## edge list
## origin not equal to destination
edgeList <- dlContactMatrix %>%
pivot_longer(cols = -Name) %>%
filter(value > 0) %>%
rename("Origin" = "Name") %>%
rename("Dest" = "name") %>%
select(-value)
#get graph from edgelist
dlContactGraph <- igraph::graph_from_edgelist(el = as.matrix(edgeList),directed = F)
dlContactGraph <- simplify(graph = dlContactGraph,remove.loops = T)
## dl contac
### take in model with modules
# secondary attack rate in non-household contacts ~ 3.9%
# secondary attack rate in household contacts ~ 11.3%
# https://jamanetwork.com/journals/jamainternalmedicine/fullarticle/2772238
n <- 1000
ed <- n * 4
prob.infect <- .07
gmma <- 14
covid_ppe <- default_ppe(faceCovering = 0.9, eyeProtection = 0.9, distancing = .85, compliance = .95)
covid_di <- ppe_density_infect(init_num = 3, transRate = prob.infect)
covid_dr <- default_recover(max_recovery_time = 20)
covid_dt <- default_testing(testDelay = 1, testFrequency = 3, falseNegRate = 0.03, falsePosRate = 0.001, propTested = 1)
covid_lv <- default_leave(leaveDuration = 10, max_recovery_time = 20)
covid_model_density <- infection_model(components = list(covid_ppe,covid_di, covid_dr,covid_dt, covid_lv))
### simulation
testSim <- runSims(graphObj = dlContactGraph,modelObj = covid_model_density, runs = 100,timeSteps = 30)
sumSim <- testSim %>%
group_by(type,time) %>%
summarize(meanValue = median(value)) %>%
ungroup() %>%
mutate(typeFac = factor(x = type,levels = c("susceptible","infected","recovered","leave") ))
testSim %>%
mutate(group = paste0(type,simRun)) %>%
mutate(typeFac = factor(x = type,levels = c("susceptible","infected","recovered","leave") )) %>%
# filter(type == "infected") %>%
ggplot() +
geom_line(aes(x = time, y = value, group = group ), color = "grey", size = 1.5, alpha = 0.2) +
geom_line(data = sumSim, aes(x = time, y = meanValue, color = typeFac), size = 1.5) +
theme_bw() +
labs(title = "SIR Distribution") +
scale_color_brewer(type = 'qual') +
facet_wrap(~typeFac)
devtools::install("./infection.graph")
library(igraph)
library(infection.graph)
library(animation)
library(readxl)
library(dplyr)
library(tidyr)
library(visNetwork)
library(networkD3)
library(ggplot2)
#source("./Code/densityInfectionModule.R")
source("./Code/testingModule.R")
source("./Code/leaveModule.R")
source("./Code/simulationModule.R")
source("./Code/PPE_Module.R")
source("./Code/ppeDensityInfectionModule.R")
## Eventually want to parallelize
#### ingest Graph Data
#read in DL Graph
dlContactMatrix <- readxl::read_xlsx("./Data/Discovery Lab Contact Network.xlsx")
groupCols <- names(dlContactMatrix)[-1]
dlContactMatrix <- dlContactMatrix %>%
mutate_at(vars(groupCols), as.integer)
dlContactMatrix[is.na(dlContactMatrix)]<- 6
## edge list
## origin not equal to destination
edgeList <- dlContactMatrix %>%
pivot_longer(cols = -Name) %>%
filter(value > 0) %>%
rename("Origin" = "Name") %>%
rename("Dest" = "name") %>%
select(-value)
#get graph from edgelist
dlContactGraph <- igraph::graph_from_edgelist(el = as.matrix(edgeList),directed = F)
dlContactGraph <- simplify(graph = dlContactGraph,remove.loops = T)
## dl contac
### take in model with modules
# secondary attack rate in non-household contacts ~ 3.9%
# secondary attack rate in household contacts ~ 11.3%
# https://jamanetwork.com/journals/jamainternalmedicine/fullarticle/2772238
n <- 1000
ed <- n * 4
prob.infect <- .07
gmma <- 14
covid_ppe <- default_ppe(faceCovering = 0.9, eyeProtection = 0.9, distancing = .85, compliance = .95)
covid_di <- ppe_density_infect(init_num = 3, transRate = prob.infect)
covid_dr <- default_recover(max_recovery_time = 20)
covid_dt <- default_testing(testDelay = 1, testFrequency = 3, falseNegRate = 0.03, falsePosRate = 0.001, propTested = 1)
covid_lv <- default_leave(leaveDuration = 10, max_recovery_time = 20)
covid_model_density <- infection_model(components = list(covid_ppe,covid_di, covid_dr,covid_dt, covid_lv))
### simulation
testSim <- runSims(graphObj = dlContactGraph,modelObj = covid_model_density, runs = 100,timeSteps = 30)
sumSim <- testSim %>%
group_by(type,time) %>%
summarize(meanValue = median(value)) %>%
ungroup() %>%
mutate(typeFac = factor(x = type,levels = c("susceptible","infected","recovered","leave") ))
testSim %>%
mutate(group = paste0(type,simRun)) %>%
mutate(typeFac = factor(x = type,levels = c("susceptible","infected","recovered","leave") )) %>%
# filter(type == "infected") %>%
ggplot() +
geom_line(aes(x = time, y = value, group = group ), color = "grey", size = 1.5, alpha = 0.2) +
geom_line(data = sumSim, aes(x = time, y = meanValue, color = typeFac), size = 1.5) +
theme_bw() +
labs(title = "SIR Distribution") +
scale_color_brewer(type = 'qual') +
facet_wrap(~typeFac)
shiny::runApp()
runApp()
runApp()
devtools::install("./infection.graph")
shiny::runApp()
runApp()
runApp()
runApp()
devtools::install("./infection.graph")
library(igraph)
library(infection.graph)
library(animation)
library(readxl)
library(dplyr)
library(tidyr)
library(visNetwork)
library(networkD3)
library(ggplot2)
source("./Code/densityInfectionModule.R")
source("./Code/testingModule.R")
source("./Code/leaveModule.R")
source("./Code/simulationModule.R")
## Eventually want to parallelize
#### ingest Graph Data
#read in DL Graph
dlContactMatrix <- readxl::read_xlsx("./Data/Discovery Lab Contact Network.xlsx")
groupCols <- names(dlContactMatrix)[-1]
dlContactMatrix <- dlContactMatrix %>%
mutate_at(vars(groupCols), as.integer)
dlContactMatrix[is.na(dlContactMatrix)]<- 6
## edge list
## origin not equal to destination
edgeList <- dlContactMatrix %>%
pivot_longer(cols = -Name) %>%
filter(value > 0) %>%
rename("Origin" = "Name") %>%
rename("Dest" = "name") %>%
select(-value)
#get graph from edgelist
dlContactGraph <- igraph::graph_from_edgelist(el = as.matrix(edgeList),directed = F)
dlContactGraph <- simplify(graph = dlContactGraph,remove.loops = T)
## dl contac
### take in model with modules
# secondary attack rate in non-household contacts ~ 3.9%
# secondary attack rate in household contacts ~ 11.3%
# https://jamanetwork.com/journals/jamainternalmedicine/fullarticle/2772238
n <- 1000
ed <- n * 4
prob.infect <- .04
gmma <- 14
covid_di <- density_infect(init_num = 3, transRate = prob.infect)
covid_dr <- default_recover(max_recovery_time = 20)
covid_dt <- default_testing(testDelay = 1, testFrequency = 2, falseNegRate = 0.03, falsePosRate = 0.001, propTested = 1)
covid_lv <- default_leave(leaveDuration = 10, max_recovery_time = 20)
covid_model_density <- infection_model(components = list(covid_di, covid_dr,covid_dt, covid_lv))
### simulation
testSim <- runSims(graphObj = dlContactGraph,modelObj = covid_model_density, runs = 100,timeSteps = 50)
sumSim <- testSim %>%
group_by(type,time) %>%
summarize(meanValue = median(value)) %>%
ungroup() %>%
mutate(typeFac = factor(x = type,levels = c("susceptible","infected","recovered","leave") ))
testSim %>%
mutate(group = paste0(type,simRun)) %>%
mutate(typeFac = factor(x = type,levels = c("susceptible","infected","recovered","leave") )) %>%
# filter(type == "infected") %>%
ggplot() +
geom_line(aes(x = time, y = value, group = group ), color = "grey", size = 1.5, alpha = 0.2) +
geom_line(data = sumSim, aes(x = time, y = meanValue, color = typeFac), size = 1.5) +
theme_bw() +
labs(title = "SIR Distribution") +
scale_color_brewer(type = 'qual') +
facet_wrap(~typeFac)
testSim$type %>% unique
sumSim <- testSim %>%
group_by(type,time) %>%
summarize(meanValue = median(value)) %>%
ungroup() %>%
mutate(typeFac = factor(x = type,levels = c("susceptible","infected","recovered","leave") ))
testSim %>%
mutate(group = paste0(type,simRun)) %>%
mutate(typeFac = factor(x = type,levels = c("susceptible","infected","recovered","leave") )) %>%
# filter(type == "infected") %>%
ggplot() +
geom_line(aes(x = time, y = value, group = group ), color = "grey", size = 1.5, alpha = 0.2) +
geom_line(data = sumSim, aes(x = time, y = meanValue, color = typeFac), size = 1.5) +
theme_bw() +
labs(title = "SIR Distribution") +
scale_color_brewer(type = 'qual') +
facet_wrap(~typeFac)
n <- 1000
ed <- n * 4
prob.infect <- .07
gmma <- 14
covid_di <- density_infect(init_num = 3, transRate = prob.infect)
covid_dr <- default_recover(max_recovery_time = 20)
covid_dt <- default_testing(testDelay = 1, testFrequency = 2, falseNegRate = 0.03, falsePosRate = 0.001, propTested = 1)
covid_lv <- default_leave(leaveDuration = 10, max_recovery_time = 20)
covid_model_density <- infection_model(components = list(covid_di, covid_dr,covid_dt, covid_lv))
### simulation
testSim <- runSims(graphObj = dlContactGraph,modelObj = covid_model_density, runs = 100,timeSteps = 50)
testSim$type %>% unique
sumSim <- testSim %>%
group_by(type,time) %>%
summarize(meanValue = median(value)) %>%
ungroup() %>%
mutate(typeFac = factor(x = type,levels = c("susceptible","infected","recovered","leave") ))
testSim %>%
mutate(group = paste0(type,simRun)) %>%
mutate(typeFac = factor(x = type,levels = c("susceptible","infected","recovered","leave") )) %>%
# filter(type == "infected") %>%
ggplot() +
geom_line(aes(x = time, y = value, group = group ), color = "grey", size = 1.5, alpha = 0.2) +
geom_line(data = sumSim, aes(x = time, y = meanValue, color = typeFac), size = 1.5) +
theme_bw() +
labs(title = "SIR Distribution") +
scale_color_brewer(type = 'qual') +
facet_wrap(~typeFac)
